#!/usr/bin/gawk -f

# phyedit: simple phylogeny manipulation and viewing with graphviz
# (c) Cam Webb 2022 <cw@camwebb.info>

BEGIN{
  
  APPNAME ="do"
  DEBUG = 0

  if (ARGV[1] == "help")
    usage()
  
  load()
  test_args()

  if(DEBUG) {
    print "File: " DIR "/" FILEBASE ".fy"
    system("cat " DIR "/" FILEBASE ".fy")
    debug("pre-action")
  }
  
  if ((ARGC == 4) && (ARGV[1] == "add"))
    add_node(ARGV[2], ARGV[3])
  if ((ARGC == 4) && (ARGV[1] == "insert"))
    insert_node(ARGV[2], ARGV[3])
  if ((ARGC == 3) && (ARGV[1] == "spin"))
    spin_node(ARGV[2])
  if ((ARGC == 3) && (ARGV[1] == "rm"))
    rm_node(ARGV[2])
  if ((ARGC == 4) && (ARGV[1] == "edit"))
    edit_label(ARGV[2], ARGV[3])
  if ((ARGC == 2) && (ARGV[1] == "newick"))
    fy2new()
  
  if(DEBUG)
    debug("post-action")
  
  make_jpg()

  if(DEBUG)
    debug("final")

  write_phy()
  
  exit 0
}


function load(   i, nd) {

  FS=OFS="|"
  PROCINFO["sorted_in"] = "@ind_str_asc"

  FILEBASE = (ENVIRON["PHYEDIT_FILEBASE"]) ? ENVIRON["PHYEDIT_FILEBASE"] : "phy"
  DIR = (ENVIRON["PHYEDIT_DIR"]) ? ENVIRON["PHYEDIT_DIR"] : "."
  
  if (system("test -f " DIR "/" FILEBASE ".fy" ))
    error("'" DIR "/" FILEBASE ".fy' is not a file")
  
  # read tree
  while ((getline < (DIR "/" FILEBASE ".fy")) > 0) {
    if (U[$1])
      error("Input tree error: duplicate '" $1 "' in column 1")
    
    U[$1] = $2
    D[$2][++nd[$2]] = $1
  }
  close(DIR "/" FILEBASE ".fy")

  # find root
  for (i in D)
    # note: test creates scalar U[Root]
    if (!length(U[i])) {
      if (!Root)
        Root = i
      else
        error("Two roots = disconnected trees; '" i "' vs '" Root "'")
    }
  
  # Force scalar arrays for tips
  for (i in U)
    isarray(D[i])
  
  system("rm " DIR "/error >& /dev/null")
}

function add_node(node, new) {

  test_node_is_in(node)
  test_node_is_out(new)

  U[new] = node

  # NOTE: a scalar array cannot be changed directly to a subarray
  if (!length(D[node])) {
    delete D[node]
    D[node][1] = new
  }
  else
    # add as last
    D[node][length(D[node])+1] = new

  # create a scalar D[new]
  isarray(D[new])
  
}

function spin_node(node  , tmp) {
  
  test_node_is_in(node)
  
  # test for exactly two daughters
  if (length(D[node]) != 2)
    error("spinning only possible with a bifurcating node")

  # only thing that need to change is the ordering of D
  tmp = D[node][1]
  D[node][1] = D[node][2]
  D[node][2] = tmp

}

function insert_node(node, new,    i) {

  test_node_is_in(node)
  test_node_is_out(new)

  if (node == Root)
    error("Cannot insert at root")

  U[new] = U[node]
  U[node] = new
  
  # D, self, create
  D[new][1] = node
  # D, parent 
  for (i = 1; i <= length(D[U[new]]); i++)
    if (D[U[new]][i] == node)
      D[U[new]][i] = new
}

function rm_node(node    , i, daughter, parent, newd, j) {
  
  test_node_is_in(node)

  # fail if trying to delete root, or a single daughter edge
  if ((node == Root) ||                                 \
      ((U[node] == Root) && (length(D[Root]) == 1)))
    error("Cannot delete root node or the single daughter of root")

  # error if the node has more than one daughters
  if (length(D[node])>1)
    error("node '" node "' has more than one daughter")

  # convenience variable
  parent = U[node]

  # deleting a single-daughter node
  if (length(D[node]) == 1) {
    
    # convenience variable
    daughter = D[node][1]
    
    # find the daughter and give it a new parent
    U[daughter] = U[node]
    # delete self
    delete U[node]
    
    # D array, adjust parent
    for (i = 1; i <= length(D[parent]); i++)
      if (D[parent][i] == node)
        D[parent][i] = daughter
    # delete for self
    delete D[node]
    
  }
  # else the node is a tip
  else {

    delete U[node]

    # D array, need to delete and reorder!
    for (i = 1; i <= length(D[parent]); i++)
      if (D[parent][i] != node) 
        newd[++j] = D[parent][i]
    for (i = 1; i < length(D[parent]); i++)
      D[parent][i] = newd[i]
    # now delete the final index
    delete D[parent][length(D[parent])]
    
    # delete self
    delete D[node]
    
  }
}

function edit_label(old, new,  i, parent) {

  test_node_is_in(old)
  test_node_is_out(new)

  # convenience
  parent = U[old]
  
  # U array
  # for daughters
  for (i in U) {
    if (U[i] == old)
      U[i] = new
  }
  # for parent
  if (old != Root) 
    U[new] = parent
  else
    isarray(U[new])
  delete U[old]

  # D, for parents (root has no parents)
  if (old != Root)
    for (i in D[parent])
      if (D[parent][i] == old)
        D[parent][i] = new

  # D, for self
  if (length(D[old])) {
    for (i in D[old])
      D[new][i] = D[old][i]
  }
  else
    isarray(D[new])
  
  delete D[old]

  if (old == Root)
    Root = new
}
  
function make_jpg(   i, j, x) {
  
  print "graph phy {\n  rankdir = \"LR\" ;\n  size=\"10,10\";\n" \
    "  dpi=\"96\";" > (DIR "/" FILEBASE ".dot")

  # Root seperate - not a daughter
  if (length(D[Root]) == 2)
    x = "spin,add,edit"
  else
    x = "add,edit"
  print "  \"" Root "\" [style=filled,URL=\"" APPNAME                   \
    "?node=" Root "&amp;actions=" x "&amp;file=" FILEBASE "\"];" >      \
    (DIR "/" FILEBASE ".dot")
  # all daughters, correctly ordered
  for (i in D)
    for (j = 1; j<=length(D[i]); j++) {
      # tips
      if (length(D[D[i][j]]) <= 1)
        x = "rm,insert,add,edit"
      else if (length(D[D[i][j]]) == 2)
        x = "spin,insert,add,edit"
      else
        x = "insert,add,edit"
      
      print "  \"" D[i][j] "\" [URL=\"" APPNAME "?node=" D[i][j]     \
        "&amp;actions=" x "&amp;file=" FILEBASE "\"];" >             \
        (DIR "/" FILEBASE ".dot")
    }
  
  for (i in U)
    if (i != Root)
      print "  \"" U[i] "\" -- \"" i "\" ;" > (DIR "/" FILEBASE ".dot")

  print "  { rank=same ;" > (DIR "/" FILEBASE ".dot")
  for (i in D)
    if (!length(D[i]))
      print "    \"" i "\" ;" > (DIR "/" FILEBASE ".dot")
  print "  }\n}" > (DIR "/" FILEBASE ".dot")
  close(DIR "/" FILEBASE ".dot")
  
  system("./dot -Tcmapx -o" (DIR "/" FILEBASE ".map") " -Tjpg -o"   \
         (DIR "/" FILEBASE ".jpg") " " (DIR "/" FILEBASE ".dot"))
}

function write_phy () {
  for (i in D)
    for (j = 1; j<=length(D[i]); j++)
      print D[i][j], i > (DIR "/" FILEBASE ".fy")
}

function test_args() {
  
  # test for unitary arguments
  for (i = 2; i < ARGC; i++)
    if (split(ARGV[i], tmp, " ") > 1)
      error("arguments must be single words: '" ARGV[i] "'")

  # TODO: add other tests for allowable node names
  
}

function test_node_is_out(x)  {
  if (U[x] || (x == Root))
    error("'" x "' already in tree")
  
  # fix index, an entry for U[x] was created during test
  delete U[x]
}

function test_node_is_in(x)  {
  if (!U[x] && (x != Root))
    error("'" x "' is not in tree")

  #/ # fix index in case the root was used as a test
  #/ if (x == Root)
  #/   delete U[Root]
}

function error(msg) {
  print msg > (DIR "/error")
  print "Error: " msg > "/dev/stderr" 
  exit 1
}

function debug(msg,     i, j) {
  print " ===================== " msg " =========================== "
  
  print "\ni, U[i]"
  for (i in U)
    print i, U[i]
  
  #/ print "\ni, Nd[i]"
  #/ for (i in Nd)
  #/   print i, Nd[i]

  print "\ni, j, D[i][j]"
  for (i in D) {
    if (length(D[i]))
      for (j in D[i])
        print i, j, D[i][j]
    else
      print i
  }
  #/ print "\ni, Tip[i]"
  #/ for (i in Tip)
  #/   print i, Tip[i]

}

function fy2new(   ) {

  for (i in D) {
    # the total number of daughters
    nd[i] = length(D[i])
    # the number closed, used to find the next daughter to visit
    closed[i] = 0
  }
  
  at = D[Root][1]
  z = "("

  while (at != Root) {
    
    # can we move down? exclude terminals
    if (nd[at] && (closed[at] != nd[at])) {
      at = D[at][closed[at] + 1]
      z = z "("
    }

    # can we move right?
    else if (nd[U[at]] != closed[U[at]]) {
      if (!nd[at])
        z = z at ","
      else
        z = z ","
      closed[U[at]]++
      # only move if it can be rightward
      if (nd[U[at]] != closed[U[at]])
        at = D[U[at]][closed[U[at]]+1]
    }
    
    # else move up
    else {
      at = U[at]
      gsub(/,$/,"", z)
      z = z ")" at
    }
  }

  print z ";"
  exit 0
}
  
function usage() {
  print "Usage: phyedit [ <action> | help ] [ <node1> [ <node2> ]] \n"  \
    "  Actions \n"                                                      \
    "    <none> : just create image \n"                                 \
    "    add    : add terminal <node2> to <node1> \n"                   \
    "    insert : add <node2> in parent edge of <node1> \n"             \
    "    rm     : delete <node1> if terminal or single-daughter-node \n" \
    "    spin   : rearrange order of daughters for bifurcating <node1> \n" \
    "    edit   : change node label for <node1> \n"                     \
    "      (all the above also output updated image of phylo) \n"         \
    "    newick : output Newick for input fy-format \n"                 \
    "  Input file\n" \
    "    default = phy.fy ; other files can be supplied via environment \n"\
    "      variables PHYEDIT_DIR and PHYEDIT_FILEBASE (omit suffix .fy)"

}
