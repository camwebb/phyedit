#!/usr/bin/gawk -f

BEGIN{
  
  APPNAME ="do"
  DIR = "tmp" # or .
  
  load()

  test_args()
  
  if ((ARGC == 4) && (ARGV[1] == "add"))
    add_node(ARGV[2], ARGV[3])
  if ((ARGC == 4) && (ARGV[1] == "insert"))
    insert_node(ARGV[2], ARGV[3])
  if ((ARGC == 3) && (ARGV[1] == "rm"))
    rm_node(ARGV[2])
  if ((ARGC == 4) && (ARGV[1] == "edit"))
    edit_label(ARGV[2], ARGV[3])
  
  make_jpg()

  write_phy()

  exit 0
}

function test_node_is_out(x)  {
  if (U[x] || (x == Root))
    error("'" x "' already in tree")
  
  # fix index, an entry for U[x] was created during test
  delete U[x]
}

function test_node_is_in(x)  {
  if (!U[x] && (x != Root))
    error("'" x "' is not in tree")

  # fix index in case the root was used as a test
  if (x == Root)
    delete U[Root]
}

function load(   i) {

  FS=OFS="|"
  PROCINFO["sorted_in"] = "@ind_str_asc"

  # read tree
  while ((getline < (DIR "/phy")) > 0) {
    if (U[$1])
      error("Input tree error: duplicate '" $1 "' in column 1")
    
    U[$1] = $2
    Nd[$2]++
  }
  close(DIR "/phy")

  # find root
  for (i in Nd)
    if (!U[i]) {
      if (!Root)
        Root = i
      else
        error("Two roots = disconnected trees; '" i "' vs '" Root "'")
    }
  # print "Root: " Root
  
  # THIS IS KEY - never realized this before!!
  delete U[Root]
  
  # find tips
  for (i in U)
    if (!Nd[i])
      Tip[i] = 1
  
  # print "Tips: "
  # for (i in U)
  #   if (Tip[i])
  #     print "  " i
  
  system("rm error >& /dev/null")
}

function test_args() {

  # test for unitary arguments
  for (i = 2; i < ARGC; i++)
    if (split(ARGV[i], tmp, " ") > 1)
      error("arguments must be single words: '" ARGV[i] "'")
}

function add_node(node, new) {

  test_node_is_in(node)
  test_node_is_out(new)
  U[new] = node
  Tip[new] = 1
  delete Tip[node]

}

function insert_node(node, new) {

  test_node_is_in(node)
  test_node_is_out(new)

  if (node == Root)
    error("Cannot insert at root")
  
  U[new] = U[node]
  U[node] = new
  
}

function rm_node(node    , i) {

  test_node_is_in(node)

  # error if the node has more than one daughters
  if (Nd[node]>1)
    error("node '" node "' has more than one daughter")

  if ((node == Root) || \
      ((U[node] == Root) && (Nd[Root] == 1)))
    error("Cannot delete root node")

  
  # deleting a single-daughter node
  else if (Nd[node] == 1) {
    # find the daughter and give it a new parent
    for (i in U)
      if (U[i] == node) {
        U[i] = U[node]
        break
      }
  }
  # else the node is a tip
  else {
    # parent has one less daughter
    Nd[U[node]]--
    
    # of the parent had been a single node and is now a term
    if (!Nd[U[node]])
      Tip[U[node]] = 1
  }
  
  delete U[node]
  
}

function edit_label(old, new,  i) {

  test_node_is_in(old)
  test_node_is_out(new)
  
  # fix label as parent
  for (i in U) {
    if (U[i] == old)
      U[i] = new
  }
  
  # fix label as daughter, unless it's root
  if (old != Root) {
    U[new] = U[old]
    delete U[old]
  }

}
  
function make_jpg() {
  
  print "graph phy {\n  rankdir = \"LR\" ;\n  size=\"10,10\";" > DIR "/phy.dot"
  
  print "  \"" Root "\" [style=filled,URL=\"" APPNAME       \
    "?node=" Root "&amp;actions=edit\"];" > DIR "/phy.dot"
  for (i in U)
    print "  \"" i "\" [URL=\"" APPNAME                 \
      "?node=" i "&amp;actions=rm,edit,insert,add\"];" > DIR "/phy.dot"

  for (i in U)
    print "  \"" U[i] "\" -- \"" i "\" ;" > DIR "/phy.dot"

  print "  { rank=same ;" > DIR "/phy.dot"
  for (i in U)
    if (Tip[i])
      print "    \"" i "\" ;" > DIR "/phy.dot"
  print "  }\n}" > DIR "/phy.dot"
  close(DIR "/phy.dot")

  system("./dot -Tcmapx -o" DIR "/phy.map -Tjpg -o" DIR "/phy.jpg "   \
         DIR "/phy.dot")
}

function write_phy () {
  for (i in U)
    print i, U[i] > DIR "/phy"
}

function error(msg) {
  print msg > DIR "/error"
  print "Error: " msg > "/dev/stderr" 
  exit 1
}
